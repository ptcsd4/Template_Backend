//------------------------------------------------------------------------------
// <auto-generated>
//     這個程式碼是由範本產生。
//
//     對這個檔案進行手動變更可能導致您的應用程式產生未預期的行為。
//     如果重新產生程式碼，將會覆寫對這個檔案的手動變更。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ptc.Demo.DataBase.SETOP
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class OPTradeEntities : DbContext
    {
        public OPTradeEntities()
            : base("name=OPTradeEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<MemberVoucher12> MemberVoucher12 { get; set; }
        public virtual DbSet<MemberVoucher22> MemberVoucher22 { get; set; }
        public virtual DbSet<MemberVoucheraa> MemberVoucheraa { get; set; }
        public virtual DbSet<MemberVoucherBase> MemberVoucherBase { get; set; }
        public virtual DbSet<MemberVoucherff> MemberVoucherff { get; set; }
        public virtual DbSet<MemberVoucherHistory> MemberVoucherHistory { get; set; }
        public virtual DbSet<OpenPointMember> OpenPointMember { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<Trade> Trade { get; set; }
        public virtual DbSet<VoucherDetail> VoucherDetail { get; set; }
        public virtual DbSet<MemberVoucher95> MemberVoucher95 { get; set; }
    
        [DbFunction("OPTradeEntities", "STRING_SPLIT")]
        public virtual IQueryable<STRING_SPLIT_Result> STRING_SPLIT(string words, string splitStr)
        {
            var wordsParameter = words != null ?
                new ObjectParameter("Words", words) :
                new ObjectParameter("Words", typeof(string));
    
            var splitStrParameter = splitStr != null ?
                new ObjectParameter("splitStr", splitStr) :
                new ObjectParameter("splitStr", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<STRING_SPLIT_Result>("[OPTradeEntities].[STRING_SPLIT](@Words, @splitStr)", wordsParameter, splitStrParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> CheckAndCreateTable(string tableName)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("TableName", tableName) :
                new ObjectParameter("TableName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CheckAndCreateTable", tableNameParameter);
        }
    
        public virtual int GetMamberActivityItemVouchersCount(string mid, string activityItemCode, ObjectParameter voucherCount)
        {
            var midParameter = mid != null ?
                new ObjectParameter("Mid", mid) :
                new ObjectParameter("Mid", typeof(string));
    
            var activityItemCodeParameter = activityItemCode != null ?
                new ObjectParameter("ActivityItemCode", activityItemCode) :
                new ObjectParameter("ActivityItemCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetMamberActivityItemVouchersCount", midParameter, activityItemCodeParameter, voucherCount);
        }
    
        public virtual ObjectResult<GetMamberNotUseVouchers_Result> GetMamberNotUseVouchers(string mid)
        {
            var midParameter = mid != null ?
                new ObjectParameter("Mid", mid) :
                new ObjectParameter("Mid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMamberNotUseVouchers_Result>("GetMamberNotUseVouchers", midParameter);
        }
    
        public virtual ObjectResult<GetMamberVouchers_Result> GetMamberVouchers(string mid, Nullable<int> type, string exchangeStartDate, string exchangeEndDate, Nullable<int> pointType)
        {
            var midParameter = mid != null ?
                new ObjectParameter("Mid", mid) :
                new ObjectParameter("Mid", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var exchangeStartDateParameter = exchangeStartDate != null ?
                new ObjectParameter("ExchangeStartDate", exchangeStartDate) :
                new ObjectParameter("ExchangeStartDate", typeof(string));
    
            var exchangeEndDateParameter = exchangeEndDate != null ?
                new ObjectParameter("ExchangeEndDate", exchangeEndDate) :
                new ObjectParameter("ExchangeEndDate", typeof(string));
    
            var pointTypeParameter = pointType.HasValue ?
                new ObjectParameter("PointType", pointType) :
                new ObjectParameter("PointType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMamberVouchers_Result>("GetMamberVouchers", midParameter, typeParameter, exchangeStartDateParameter, exchangeEndDateParameter, pointTypeParameter);
        }
    
        public virtual int MantainExpiredTrade(Nullable<System.DateTime> historyExpiredDate, ObjectParameter log)
        {
            var historyExpiredDateParameter = historyExpiredDate.HasValue ?
                new ObjectParameter("HistoryExpiredDate", historyExpiredDate) :
                new ObjectParameter("HistoryExpiredDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MantainExpiredTrade", historyExpiredDateParameter, log);
        }
    
        public virtual ObjectResult<string> MantainMamberVouchers(Nullable<System.DateTime> historyExpiredDate, ObjectParameter log)
        {
            var historyExpiredDateParameter = historyExpiredDate.HasValue ?
                new ObjectParameter("HistoryExpiredDate", historyExpiredDate) :
                new ObjectParameter("HistoryExpiredDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("MantainMamberVouchers", historyExpiredDateParameter, log);
        }
    
        public virtual ObjectResult<MemberVoucherExpireCount_Result> MemberVoucherExpireCount(Nullable<System.DateTime> expireDate)
        {
            var expireDateParameter = expireDate.HasValue ?
                new ObjectParameter("expireDate", expireDate) :
                new ObjectParameter("expireDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MemberVoucherExpireCount_Result>("MemberVoucherExpireCount", expireDateParameter);
        }
    
        public virtual int SetVoucherUsed(string mid, string pinCode, Nullable<bool> isUsed, Nullable<bool> needToCheckVoucherType, ObjectParameter result)
        {
            var midParameter = mid != null ?
                new ObjectParameter("Mid", mid) :
                new ObjectParameter("Mid", typeof(string));
    
            var pinCodeParameter = pinCode != null ?
                new ObjectParameter("PinCode", pinCode) :
                new ObjectParameter("PinCode", typeof(string));
    
            var isUsedParameter = isUsed.HasValue ?
                new ObjectParameter("IsUsed", isUsed) :
                new ObjectParameter("IsUsed", typeof(bool));
    
            var needToCheckVoucherTypeParameter = needToCheckVoucherType.HasValue ?
                new ObjectParameter("NeedToCheckVoucherType", needToCheckVoucherType) :
                new ObjectParameter("NeedToCheckVoucherType", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SetVoucherUsed", midParameter, pinCodeParameter, isUsedParameter, needToCheckVoucherTypeParameter, result);
        }
    
        public virtual ObjectResult<Nullable<int>> ShareVoucher(string fromMid, string pinCode, string toMid, ObjectParameter result)
        {
            var fromMidParameter = fromMid != null ?
                new ObjectParameter("FromMid", fromMid) :
                new ObjectParameter("FromMid", typeof(string));
    
            var pinCodeParameter = pinCode != null ?
                new ObjectParameter("PinCode", pinCode) :
                new ObjectParameter("PinCode", typeof(string));
    
            var toMidParameter = toMid != null ?
                new ObjectParameter("ToMid", toMid) :
                new ObjectParameter("ToMid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("ShareVoucher", fromMidParameter, pinCodeParameter, toMidParameter, result);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int TransferVoucherDetail()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TransferVoucherDetail");
        }
    }
}
